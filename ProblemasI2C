O DISPLAY I2C NÃO FUNCIONA EM CASO DE FALHA DE ALIMENTAÇÃO E RELIGAMENTO DO ARDUINO?

A falta de alimentação durante um funcionamento normal gera uma falha do correto funcionamento no sistema. 
Seja simplesmente para desalimentar após turno de funcionamento normal ou fruto da falha energética de alimentação. 
Como o barramento I²C escravo é incapaz de gerar sinal de falha, por apenas receber os dados necessários e 
trabalha como “dreno aberto”, é incapaz de gerar informações de retorno. Cabe somente ao dispositivo mestre 
ajustar a sincronia do barramento e informações que por ele trafega. Existem recursos de harware a ser implementado
que é o que chamamos de resistores de pull-up, alocados no SCL e DAS do microcontrolador, assim, serão capazes de 
forçar o funcionamento inicial.

RESET FUNC

Entretanto, podemos implementar recursos no sketch para monitorar o funcionamento. Alguns deles permitem 
retornar ao endereçamento zero e reiniciar as linhas de programação. Um bom exemplo deste recurso citado é o
“void reset”, com a seguinte sintaxe:

void (* resetFunc) (void) = 0;
void setup() {
/* Configurações iniciais */
}
void loop() {
//Funções de loop 
resetFunc(); 	//Comando para reiniciar o sketch a
//partir do endereço de memória 0.
}

Este comando pode ser posicionado no final do loop, no entanto, toda vez que completar o loop, a 
posição “zero” será chamada, reiniciando o microcontrolador.

WATCHDOG TIMER

O outro exemplo, que inclusive bastante eficiente (E REQUER CUIDADOS ESPECIAIS por manipular 
comandos de timers internos do microcontrolador) é o uso do WatchDog Timer. Como o nome diz, é 
um “cão de guarda” que, quando bem aplicado, vigia o bom funcionamento das funções. Este recurso 
requer o uso de uma biblioteca interna da IDE e trabalha bem na correção de falhas. Vamos conhecer a sintaxe:

#include <avr/wdt,h>

setup(){
//Configurações iniciais
MCUSR = 0;		//Limpa qualquer flag ou resets prioritários,
//interrompendo-os
}

void loop(){
//Funções e rotinas
wdt_enable(WDTO_15MS); //Envia o sinal para o WatchDog Timer.
    //Se não enviado, ele automaticamente
    //reseta o código.
}

Estes dois recursos operam no código, exatamente como se pressionássemos o botão físico do reset do Arduino. 
Com a vantagem do WDT de monitorar o funcionamento, enviando um sinal de controle para o “vigia” caso seja 
necessário reiniciar o sistema.

A BOA E VELHA ELETRÔNICA

O problema dos casos acima é o reset do Arduino toda vez que o void loop é cumprido ou quando o uma 
anormalidade acontece e o tempo de vigia excede. O que pode ocorrer com a possibilidade de uma interrupção
qualquer que seja ela.

O recurso usado foi um capacitor eletrolítico de 16V 100uF (um de valor menor, mas compatível com o nível de tensão de trabalho
do Arduino, pode ser aplicado sem problema). A função básica do capacitor é simples: Armazenar energia. No entanto,
para armazenar energia, ele precisa ser alimentado. Durante este efeito, ele é capaz de atrasar a tensão enquanto
esta varia na unidade de tempo. Mesmo sendo CC, no instante que a tensão varia até o nível máximo, o capacitor irá
atuar.

Este atraso é primordial para provocar um reset no Arduino através do seu pino dedicado e assim, forçar o funcionamento
do circuito uma única vez quando alimentado, sem a necessidade de provocar o reset via software.

Quando ligado, o Arduino carrega a armadura do lado positivo (que está no pino Reset) se carrega com o valor
da alimentação, o lado negativo logicamente se carrega com pulso contrário. Como a função dele é atrasar o sinal recebido,
pois precisa ser carregado com o mesmo nível lógico, o pino entenderá como sinal baixo. Assim, ao alimentar, o capacitor
efetua o reset do sistema por conta do efeito de recarga e assim ficará enquanto estiver alimentado, sem o risco de
resetar durante o funcionamento, pois como a função do capacitor é armazenar a carga elétrica, o pulso positivo ficará
disponível nele por uma pequena fração de segundo depois do desligamento.

Pois considerando que os resistores internos do Arduino sejam da ordem de 20.000 Ohms, uma constante de tempo para
um capacitor de 100uF seria de aproximadamente 2 segundos. Usando valores de base 10 para este cálculo, podemos ter tempos
de 0,2 segundos para capacitores de 10uF e 0,02 segundos para capacitores de 1uF. O que já acho aceitáve, pois por vezes
o tempo para o void setup ocorrer, por vezes, supera 1 segundo, ou seja, 5 vezes maior que o tempo adicional necessário para
o reset usando um capacitor de 10uF.
